@use "../abstracts/variables" as v;
@use "../base/functions" as func;

*,
*::before,
*::after {
  box-sizing: border-box;
}

body {
  scroll-behavior: smooth;
  scroll-margin-block: auto;
  scrollbar-width: thin;
  scrollbar-color: hsl(0, 0%, 60%) transparent;
  scrollbar-gutter: stable;
}
body::-webkit-scrollbar {
  width: 0.9em;
  height: 0.9em;
}
body::-webkit-scrollbar-track {
  background-color: transparent;
  border-radius: 100vw;
}
body::-webkit-scrollbar-thumb {
  background-color: hsl(0, 0%, 60%);
  border-radius: 100vw;
}
body::-webkit-scrollbar-track:hover {
  background-color: hsl(0, 0%, 60%, 0.25);
}
body::-webkit-scrollbar-thumb:hover {
  background-color: hsl(0, 0%, 50%);
}

body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
input,
fieldset {
  margin: 0;
}

ul,
ol {
  padding: 0;
  list-style: none;
}

fieldset,
legend {
  padding: 0;
}

fieldset {
  border: 0;
}

a {
  color: inherit;
  text-decoration: none;
  outline-offset: 0.25em;
  text-underline-offset: 0.25em;

  &:hover {
    text-decoration: underline;
  }
}

img,
svg {
  display: block;
  -webkit-user-select: none;
  user-select: none;
}

svg {
  fill: currentColor;
}

button {
  padding: 0;
  border: none;
  background: transparent;
  font: inherit;
  color: inherit;
  cursor: pointer;

  &:disabled {
    cursor: not-allowed;
  }
}

p {
  line-height: func.rem(22);
}

/* clears the ‘X’ from Internet Explorer */
input[type="search"]::-ms-clear {
  display: none;
  width: 0;
  height: 0;
}
input[type="search"]::-ms-reveal {
  display: none;
  width: 0;
  height: 0;
}
/* clears the ‘X’ from Chrome */
input[type="search"]::-webkit-search-decoration,
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-results-button,
input[type="search"]::-webkit-search-results-decoration {
  display: none;
}

/* autocomplete background color and font color doesn't change */
input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus {
  transition: all 1000s;
}

body[data-overlay="true"] {
  overflow-y: hidden;
}

body {
  position: relative;
  transition: background-color 2s;
}

.overlay {
  position: fixed;
  inset: 0;
  transition: background-color v.$main-transition;
  visibility: hidden;
}
body[data-overlay="true"] > .overlay {
  background-color: hsla(0, 0%, 0%, 0.25);
  visibility: visible;
}
