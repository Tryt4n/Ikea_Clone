// Import React dependencies
import React from "react";
// Import React Router dependencies
import { ScrollRestoration } from "react-router-dom";
// Import custom hook
import useFetch from "../../hooks/useFetch";
// Import utils
import { componentMapper } from "./utils/componentMapper";
// Import components
import PageLoadingSpinner from "../../components/ui/LazyLoadPageLoadingSpinner/PageLoadingSpinner";
import { ErrorFallback } from "./components/ErrorFallback";
// Import types
import type { ArticlesType } from "../../layout/Articles/types/ArticleTypes";
// Import styles
import "./index.scss";

/**
 * HomePage is a functional component that renders the home page of the application.
 *
 * It uses the custom hook useFetch to fetch the articles data from a URL.
 *
 * The component renders a PageLoadingSpinner if the data is still loading and no error has occurred.
 * If an error has occurred, it renders an ErrorFallback component.
 * If the data has loaded successfully, it renders a div element with the class "articles", containing a ScrollRestoration component and a list of article components.
 *
 * The list of article components is generated by mapping over the articles data and calling the componentMapper function for each article.
 *
 * @returns {JSX.Element} A PageLoadingSpinner, ErrorFallback, or a div element with a ScrollRestoration component and a list of article components, depending on the state of the data fetch.
 */

export default function HomePage() {
  const URL = import.meta.env.VITE_URL; // Import the URL from the .env file

  const articles = useFetch<ArticlesType>(URL); // Use the custom hook useFetch to fetch the articles data

  const homePageArticles = articles.data; // Assign the articles data to a variable

  return (
    <>
      {/* If the data is still loading and no error has occurred, render a PageLoadingSpinner */}
      {articles.isLoading && !articles.isError ? (
        <PageLoadingSpinner />
      ) : // If an error has occurred, render an ErrorFallback component
      articles.isError ? (
        <ErrorFallback />
      ) : (
        // If the data has loaded successfully, render a div element with a ScrollRestoration component from react-router-dom and a list of article components
        <>
          {homePageArticles && (
            <div className="articles">
              <ScrollRestoration />

              {/* Map over the articles data and call the componentMapper function for each article */}
              {homePageArticles.articles.map((article) => (
                <React.Fragment key={article.id}>{componentMapper(article)}</React.Fragment>
              ))}
            </div>
          )}
        </>
      )}
    </>
  );
}
