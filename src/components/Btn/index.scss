@use "../../abstracts/mixins" as *;
@use "../../abstracts/colors" as c;
@use "../../abstracts/variables" as v;
@use "../../base/functions" as func;
@use "../../base/breakpoints" as b;

.btn {
  width: fit-content;
  @include center;
  font-weight: bold;
  text-align: center;
  transition: v.$main-transition;

  &:hover {
    text-decoration: none;
  }

  &:focus {
    outline-offset: 0.5rem;
  }

  &--small {
    min-height: 2.5rem;
    font-size: 0.75rem;
  }

  &--big {
    min-height: 3.5rem;
    font-size: func.rem(14);

    @media screen and (width < b.$mobile-md) {
      min-height: 2.5rem;
      font-size: 0.75rem;
    }
  }

  &--oval {
    padding-inline: func.rem(24);
    border-radius: 50vw;
  }
  &--circle {
    border-radius: 50%;
    aspect-ratio: 1/1;
    outline-offset: 0 !important;
  }

  &--dark {
    background-color: c.$black;
    color: c.$white;

    &:not(:disabled):hover {
      background-color: c.$dark-gray;
    }
  }

  &--light,
  &--light-with-border {
    background-color: c.$white;
    color: c.$black;

    &:not(:disabled):hover {
      background-color: c.$gray;
    }
  }

  &--light-with-border {
    border: func.rem(1) solid c.$text-gray;
  }

  &--white-with-border {
    border: func.rem(1) solid c.$text-gray;

    &:not(:disabled):hover {
      border-color: transparent;
      box-shadow: c.$black 0px 0px 0px 0.125rem;
    }
  }

  &--blue {
    background-color: c.$blue-dark;
    color: c.$white;

    &:not(:disabled):hover {
      background-color: c.$very-dark-blue;
    }
  }

  &--gray {
    background-color: c.$grayish;
    color: c.$black;

    &:not(:disabled):hover {
      background-color: c.$gray;
    }
  }

  &--dark-opaque {
    background-color: c.$opaque-dark;
    color: c.$white;

    &:not(:disabled):where(:hover, :focus-visible) {
      background-color: c.$opaque-dark-on-hover;
      color: c.$white;
    }
  }

  &--warn {
    background-color: c.$light-red;
    color: white;
  }

  &:is(:disabled)[aria-pressed="true"] {
    border: func.rem(1) solid c.$black;
  }
}
